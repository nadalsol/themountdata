// Gallery CSS
// -----------------------------------------------------------------------------
// https://github.com/benschwarz/gallery-css

$item-display-duration: 5 !default; //seconds
$transition-duration: 2 !default; // seconds
$display-duration: $transition-duration + $item-display-duration;
$item-ht: 585px !default;

@mixin inactive-button { color: #ccc; color: rgba(255, 255, 255, .4); }
@mixin active-button { color: white; color: rgba(255, 255, 255, .8); }

%inactive-button { @include inactive-button; }
%active-button { @include active-button; }


// Gallery
@mixin gallery( $item-count ) {
  $total-duration: $display-duration * $item-count;

  @keyframes controlAnimation-#{$item-count} {
    0% { @include inactive-button; }
    #{100% * $transition-duration / $total-duration},
    #{100% * $display-duration / $total-duration} { @include active-button; }
    #{100% * ($display-duration + $transition-duration) / $total-duration},
    100% { @include inactive-button; }
  }

  @keyframes galleryAnimation-#{$item-count} {
    0% { opacity: 0; }
    #{100% * $transition-duration / $total-duration},
    #{100% * $display-duration / $total-duration} { opacity: 1; }
    #{100% * ($display-duration + $transition-duration) / $total-duration},
    100% { opacity: 0; }
  }

  .gallery {
    @for $j from 1 through $item-count {
      .control-operator:nth-of-type(#{$j}):target ~ .item:nth-of-type(#{$j}) { pointer-events: auto; opacity: 1; }
      .control-operator:nth-of-type(#{$j}):target ~ .controls .control-button:nth-of-type(#{$j}) { @extend %active-button; }
    }
  }

  .items-#{$item-count} {
    &.autoplay .control-button { animation: controlAnimation-#{$item-count} #{$total-duration}s infinite; }
    &.autoplay .item { animation: galleryAnimation-#{$item-count} #{$total-duration}s infinite; }

    @for $j from 1 through $item-count {
      .control-button:nth-of-type(#{$j}),
      .item:nth-of-type(#{$j}) {
        $delay: #{($j - 1) * ($display-duration) - $transition-duration}s;
        animation-delay: #{$delay};
      }
    }
  }
}

.gallery {
  .item:first-of-type { position: static; pointer-events: auto; opacity: 1; } // Set the first item to be visible
  .item { position: absolute; top: 0; left: 0; width: 100%; height: 100%;  pointer-events: none; opacity: 0; transition: opacity .5s; }

  .control-operator { display: none; } // Stop hash links from scrolling up and down

  .control-operator:target ~ .item { pointer-events: none; opacity: 0; animation: none; } // Unselected image

  .control-button:first-of-type { @extend %active-button; }
  .control-operator:target ~ .controls .control-button { @extend %inactive-button; animation: none; } // Kill button animation when there is a selected image
}


// Gallery theme: controls how everything looks in Gallery CSS
.gallery {
  position: relative;

  .item { height: $item-ht; overflow: hidden; text-align: center; background: #4d87e2; margin: 0; }
  .controls { position: absolute; bottom: 0; width: 100%; text-align: center; }

  .control-button {
    display: inline-block; margin: 0 .02em;
    font-size: 3em;

    @extend %inactive-button;

    text-align: center; text-decoration: none;
    transition: color .1s;

    &:hover { @extend %active-button; }
  }

  @mixin control-arrow {
    position: absolute;
    top: 0;
    width: 80px;
    height: 100%;
    font-size: 100px;
    line-height: $item-ht;
    text-align: center;
    color: white;
    background-color: black;
    background-color: rgba(0, 0, 0, .2);
  }

  .control-arrow-l {
    @include control-arrow;
    left: 0;
  }

  .control-arrow-r {
    @include control-arrow;
    right: 0;
  }
}


// Gallery build
@for $i from 2 through 5 {
  @include gallery($i);
}
